{"version":3,"sources":["components/TableHeader.tsx","components/TableBody.tsx","components/EmployeeTable.tsx","app/App.tsx","api/getEmployees.ts","reportWebVitals.ts","reducers/empDetailsReducers.ts","reducers/index.ts","store.ts","index.tsx"],"names":["TableHeader","_ref","columns","handleSorting","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","order","setOrder","React","createElement","map","_ref2","label","key","sortable","cl","className","onClick","accessor","sortOrder","handleSortingChange","TableBody","tableData","console","log","length","colSpan","empDetail","id","data-testid","tData","EmployeeTable","employeesReducerData","useSelector","state","empDetailsReducers","employees","employeesList","setEmployeesList","paginated","setPaginated","_useState5","_useState6","currentPage","setCurrentPage","_useState7","perPage","startCount","endCount","handlePageChange","pageNumber","paginatedData","slice","useEffect","Container","fluid","aria-label","Row","style","alignItems","justifyContent","Col","xs","Form","Control","type","placeholder","onChange","e","event","input","target","value","toLowerCase","nameFiltered","filter","person","personFirstName","first_name","personLastName","last_name","includes","handleNameSearch","display","Dropdown","onSelect","minSalary","maxSalary","Infinity","filtered","employee","salary","parseFloat","replace","Toggle","Menu","Item","eventKey","Table","responsive","striped","sorted","_toConsumableArray","sort","a","b","toString","localeCompare","numeric","ButtonGroup","Button","variant","disabled","Math","floor","EmployeeGrid","dispatch","useDispatch","getEmployeesList","axios","get","then","data","payload","catch","error","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","initialData","arguments","undefined","action","_objectSpread","rootReducer","combineReducers","store","createStore","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider"],"mappings":"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","file":"static/js/main.c1b14ab4.chunk.js","sourcesContent":["import React, { FC, useState } from \"react\";\nimport { Employee } from \"../types/employees\";\ninterface ITableHead {\n  columns: any;\n  handleSorting: (columnKey: keyof Employee, sortOrder: string) => void;\n}\nconst TableHeader: FC<ITableHead> = ({ columns, handleSorting }) => {\n  const [sortField, setSortField] = useState(\"\");\n  const [order, setOrder] = useState(\"asc\");\n\n  const handleSortingChange = (accessor: keyof Employee) => {\n    const sortOrder =\n      accessor === sortField && order === \"asc\" ? \"desc\" : \"asc\";\n    setSortField(accessor);\n    setOrder(sortOrder);\n    handleSorting(accessor, sortOrder);\n  };\n\n  return (\n    <thead>\n      <tr>\n        {columns.map(({ label, key, sortable }: any) => {\n          const cl = sortable\n            ? sortField === key && order === \"asc\"\n              ? \"up\"\n              : sortField === key && order === \"desc\"\n              ? \"down\"\n              : \"default\"\n            : \"\";\n          return (\n            <th\n              key={label}\n              className={cl}\n              onClick={\n                sortable\n                  ? () => handleSortingChange(key as keyof Employee)\n                  : () => {}\n              }\n            >\n              {label}\n            </th>\n          );\n        })}\n      </tr>\n    </thead>\n  );\n};\n\nexport default TableHeader;\n","import React, { FC } from \"react\";\nimport { Employee } from \"../types/employees\";\n\ninterface ITableBody {\n  tableData: Employee[];\n  columns: any;\n}\nconst TableBody: FC<ITableBody> = ({ tableData, columns }) => {\n  console.log(tableData);\n  return (\n    <tbody>\n      {tableData.length === 0 ? (\n        <tr>\n          <td colSpan={columns.length}>No data available</td>\n        </tr>\n      ) : (\n        tableData.map((empDetail: Employee) => (\n          <tr key={empDetail.id} data-testid=\"employee-info-row\">\n            {columns.map(({ key }: any) => {\n              const tData = empDetail[key as keyof Employee]\n                ? empDetail[key as keyof Employee]\n                : \"——\";\n              return <td key={key}>{tData}</td>;\n            })}\n          </tr>\n        ))\n      )}\n    </tbody>\n  );\n};\nexport default TableBody;\n","import React, { FC, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  Col,\n  Container,\n  Dropdown,\n  Form,\n  Row,\n  Table,\n} from \"react-bootstrap\";\nimport { Employee } from \"../types/employees\";\nimport TableHeader from \"./TableHeader\";\nimport TableBody from \"./TableBody\";\nimport { useSelector } from \"react-redux\";\n\nconst columns = [\n  { label: \"First Name\", key: \"first_name\", sortable: true },\n  { label: \"Last Name\", key: \"last_name\", sortable: true },\n  { label: \"Email\", key: \"email\", sortable: false },\n  { label: \"Date of Birth\", key: \"dob\", sortable: false },\n  { label: \"Address\", key: \"address\", sortable: false },\n  { label: \"Salary\", key: \"salary\", sortable: false },\n];\n\nconst EmployeeTable = () => {\n  const employeesReducerData = useSelector(\n    (state: any) => state.empDetailsReducers.employees\n  );\n  const [employeesList, setEmployeesList] = useState<Employee[]>([]);\n  const [paginated, setPaginated] = useState<Employee[]>([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [perPage] = useState(10);\n\n  const startCount = currentPage === 0 ? 1 : currentPage * perPage + 1;\n  const endCount = currentPage === 0 ? perPage : (currentPage + 1) * perPage;\n\n  const handlePageChange = (pageNumber: number) => {\n    setCurrentPage(pageNumber);\n    const paginatedData = employeesList.slice(\n      perPage * pageNumber,\n      perPage * pageNumber + perPage\n    );\n    setPaginated(paginatedData);\n  };\n\n  const handleSorting = (sortField: keyof Employee, sortOrder: string) => {\n    if (sortField) {\n      const sorted = [...paginated].sort((a, b) => {\n        if (a[sortField] === null) return 1;\n        if (b[sortField] === null) return -1;\n        if (a[sortField] === null && b[sortField] === null) return 0;\n        return (\n          a[sortField].toString().localeCompare(b[sortField].toString(), \"en\", {\n            numeric: true,\n          }) * (sortOrder === \"asc\" ? 1 : -1)\n        );\n      });\n      setPaginated(sorted);\n    }\n  };\n\n  const handleSalaryChange = (value: any) => {\n    let minSalary = 0;\n    let maxSalary = Infinity;\n    const paginatedData = employeesList.slice(\n      perPage * currentPage,\n      perPage * currentPage + perPage\n    );\n    if (value === \"all\") {\n      setPaginated(paginatedData);\n    } else {\n      if (value === \"10000\") {\n        maxSalary = 10000;\n      } else if (value === \"20000\") {\n        minSalary = 10000;\n        maxSalary = 20000;\n      } else if (value === \"30000\") {\n        minSalary = 20000;\n        maxSalary = 30000;\n      }\n      const filtered = paginatedData.filter((employee) => {\n        const salary = parseFloat(\n          employee.salary.replace(\"$\", \"\").replace(\",\", \"\")\n        );\n        return salary >= minSalary && salary <= maxSalary;\n      });\n      setPaginated(filtered);\n    }\n  };\n\n  const handleNameSearch = (event: any) => {\n    const input = event.target.value.toLowerCase();\n    const paginatedData = employeesList.slice(\n      perPage * currentPage,\n      perPage * currentPage + perPage\n    );\n    const nameFiltered = paginatedData.filter((person) => {\n      const personFirstName = person.first_name.toLowerCase();\n      const personLastName = person.last_name.toLowerCase();\n\n      return personFirstName.includes(input) || personLastName.includes(input);\n    });\n    setPaginated(nameFiltered);\n  };\n\n  useEffect(() => {\n    if (employeesReducerData.length) {\n      setEmployeesList(employeesReducerData);\n    }\n  }, [employeesReducerData]);\n\n  useEffect(() => {\n    setCurrentPage(0);\n    setPaginated(employeesList.slice(0, perPage));\n  }, [employeesList]);\n\n  return (\n    <Container fluid aria-label=\"employee-table-container\">\n      <Row style={{ alignItems: \"center\", justifyContent: \"flex-end\" }}>\n        <Col xs=\"6\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Search by first name/last name\"\n            onChange={(e) => handleNameSearch(e)}\n          />\n        </Col>\n        <Col xs=\"6\" style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Dropdown onSelect={handleSalaryChange}>\n            <Dropdown.Toggle id=\"dropdown-basic\">\n              Filter by Salary\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item eventKey=\"all\">All</Dropdown.Item>\n              <Dropdown.Item eventKey=\"10000\">Less than $10,000</Dropdown.Item>\n              <Dropdown.Item eventKey=\"20000\">$10,000 - $20,000</Dropdown.Item>\n              <Dropdown.Item eventKey=\"30000\">$20,000 - $30,000</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs=\"12\">\n          <Table className=\"table\" responsive striped>\n            <TableHeader columns={columns} handleSorting={handleSorting} />\n\n            <TableBody columns={columns} tableData={paginated} />\n          </Table>\n        </Col>\n      </Row>\n\n      <Row style={{ alignItems: \"center\", justifyContent: \"flex-end\" }}>\n        <Col xs=\"6\">\n          <p>\n            Showing {startCount}-{endCount} of {employeesList.length} entries\n          </p>\n        </Col>\n        <Col xs=\"6\" style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <ButtonGroup aria-label=\"pagination\">\n            <Button\n              variant=\"primary\"\n              onClick={() => handlePageChange(currentPage - 1)}\n              disabled={currentPage === 0}\n            >\n              {\"<\"}\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={() => handlePageChange(currentPage + 1)}\n              disabled={\n                currentPage + 1 === Math.floor(employeesList.length / perPage)\n              }\n            >\n              {\">\"}\n            </Button>\n          </ButtonGroup>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default EmployeeTable;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport EmployeeTable from \"../components/EmployeeTable\";\nimport { getEmployees } from \"../api/getEmployees\";\nimport { useDispatch } from \"react-redux\";\n\nconst EmployeeGrid = () => {\n  const dispatch = useDispatch();\n\n  const getEmployeesList = () => {\n    getEmployees()\n      .then(({ data }) => {\n        dispatch({ type: \"ADD_EMPLOYEES\", payload: data.employees });\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n\n  useEffect(() => {\n    getEmployeesList();\n  }, []);\n\n  return <EmployeeTable />;\n};\n\nexport default EmployeeGrid;\n","import axios from \"axios\";\n\nexport const getEmployees = () => {\n  return axios.get(`https://mocki.io/v1/4b8fe8d1-24d0-49f4-8214-66ea2fd3e5ea`);\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialData = {\n  employees: [],\n};\n\nconst empDetailsReducers = (state = initialData, action) => {\n  switch (action.type) {\n    case \"ADD_EMPLOYEES\":\n      return {\n        ...state,\n        employees: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default empDetailsReducers;\n","import empDetailsReducers from \"./empDetailsReducers\";\n\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  empDetailsReducers,\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport EmployeeGrid from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <EmployeeGrid />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}